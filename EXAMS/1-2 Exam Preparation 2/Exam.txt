---------------------------------------------------------------------------------
Section 1. DDL (30 pts)
---------------------------------------------------------------------------------

CREATE TABLE Students(
Id INT PRIMARY KEY IDENTITY,
FirstName NVARCHAR(30) NOT NULL,
MiddleName NVARCHAR(25),
LastName NVARCHAR(30) NOT NULL,
Age INT CHECK(Age BETWEEN 5 AND 100),
Address NVARCHAR(50),
Phone NCHAR(10)
)

CREATE TABLE Subjects(
Id INT PRIMARY KEY IDENTITY,
Name  NVARCHAR(20) NOT NULL,
Lessons INT CHECK(Lessons > 0) NOT NULL
)

CREATE TABLE StudentsSubjects(
Id INT PRIMARY KEY IDENTITY,
StudentId INT FOREIGN KEY REFERENCES Students(Id) NOT NULL,
SubjectId INT FOREIGN KEY REFERENCES Subjects(Id) NOT NULL,
Grade DECIMAL(18, 2) CHECK(Grade BETWEEN 2 AND 6) NOT NULL
)

CREATE TABLE Exams(
Id INT PRIMARY KEY IDENTITY,
Date DATETIME,
SubjectId INT FOREIGN KEY REFERENCES Subjects(Id) NOT NULL
)

CREATE TABLE StudentsExams(
StudentId INT FOREIGN KEY REFERENCES Students(Id) NOT NULL,
ExamId INT FOREIGN KEY REFERENCES Exams(Id) NOT NULL,
Grade DECIMAL(18, 2) CHECK(Grade BETWEEN 2 AND 6) NOT NULL
PRIMARY KEY(StudentId, ExamId)
)

CREATE TABLE Teachers(
Id INT PRIMARY KEY IDENTITY,
FirstName NVARCHAR(20) NOT NULL,
LastName NVARCHAR(20) NOT NULL,
Address NVARCHAR(20) NOT NULL,
Phone CHAR(10),
SubjectId INT FOREIGN KEY REFERENCES Subjects(Id) NOT NULL
)

CREATE TABLE StudentsTeachers(
StudentId INT FOREIGN KEY REFERENCES Students(Id) NOT NULL,
TeacherId INT FOREIGN KEY REFERENCES Teachers(Id) NOT NULL
PRIMARY KEY (StudentId, TeacherId)
)


---------------------------------------------------------------------------------
02. Insert
---------------------------------------------------------------------------------

INSERT INTO Teachers
VALUES('Ruthanne', 'Bamb', '84948 Mesta Junction',	'3105500146', 6),
('Gerrard',	'Lowin', '370 Talisman Plaza', '3324874824', 2),
('Merrile',	'Lambdin',	'81 Dahle Plaza', '4373065154',	5),
('Bert', 'Ivie', '2 Gateway Circle', '4409584510',	4)

INSERT INTO Subjects
VALUES('Geometry',	12),
('Health',	10),
('Drama', 7),
('Sports', 9)

---------------------------------------------------------------------------------
03. Update
---------------------------------------------------------------------------------

UPDATE StudentsSubjects
SET Grade = 6
WHERE (SubjectId BETWEEN 1 AND 2) AND Grade >= 5.50

---------------------------------------------------------------------------------
04. Delete
---------------------------------------------------------------------------------

DELETE FROM StudentsTeachers
WHERE TeacherId IN (SELECT Id FROM Teachers
			WHERE Phone LIKE '%72%')

DELETE FROM Teachers
WHERE Phone LIKE '%72%'

---------------------------------------------------------------------------------
05. Teen Students
---------------------------------------------------------------------------------

SELECT FirstName,
LastName,
Age
FROM Students
WHERE Age >= 12
ORDER BY FirstName, LastName

---------------------------------------------------------------------------------
06. Students Teachers
---------------------------------------------------------------------------------

SELECT s.FirstName,
s.LastName,
t.TeachersCount
FROM Students s
LEFT JOIN (SELECT StudentId,
			COUNT(*) AS TeachersCount
			FROM StudentsTeachers
			GROUP BY StudentId) AS t ON t.StudentId = s.Id
ORDER BY LastName

---------------------------------------------------------------------------------
07. Students to Go
---------------------------------------------------------------------------------

SELECT s.FirstName + ' ' + s.LastName AS [Full Name]
FROM Students s
LEFT JOIN (SELECT StudentId,
		COUNT(*) AS Exams
		FROM StudentsExams
		GROUP BY StudentId) AS t ON t.StudentId = s.Id
WHERE t.Exams IS NULL
ORDER BY [Full Name]

---------------------------------------------------------------------------------
08. Top Students
---------------------------------------------------------------------------------

SELECT TOP 10
s.FirstName,
s.LastName,
FORMAT(T.Grade, 'N2') AS Grade
FROM
(SELECT StudentId,
		AVG(Grade) AS Grade
		FROM StudentsExams
		GROUP BY StudentId) t
JOIN Students AS s ON s.Id = t.StudentId
ORDER BY t.Grade DESC, s.FirstName, s.LastName

---------------------------------------------------------------------------------
09. Not So In The Studying
---------------------------------------------------------------------------------

SELECT 
s.FirstName + ' ' + ISNULL(s.MiddleName + ' ', '') + s.LastName AS [Full Name]
FROM Students s
LEFT JOIN (SELECT StudentId,
		COUNT(*) AS Subjects
		FROM StudentsSubjects
		GROUP BY StudentId) AS t ON t.StudentId = s.Id
WHERE t.Subjects IS NULL
ORDER BY [Full Name]

---------------------------------------------------------------------------------
10. Average Grade per Subject
---------------------------------------------------------------------------------

SELECT s.Name,
t.AverageGrade
FROM Subjects s
JOIN (SELECT SubjectId,
		AVG(Grade) AS AverageGrade
		FROM StudentsSubjects
		GROUP BY SubjectId) AS t ON t.SubjectId = s.Id
ORDER BY s.Id

---------------------------------------------------------------------------------
11. Exam Grades
---------------------------------------------------------------------------------

CREATE FUNCTION udf_ExamGradesToUpdate(@studentId INT, @grade DECIMAL(18, 2))
RETURNS NVARCHAR(100)
BEGIN

	IF(@studentId NOT IN (SELECT Id FROM Students))
		BEGIN
			RETURN 'The student with provided id does not exist in the school!'
		END

	IF(@grade > 6.00)
		BEGIN
			RETURN 'Grade cannot be above 6.00!'
		END

	DECLARE @count INT
	DECLARE @name NVARCHAR(30)
	SET @count = (SELECT COUNT (*) AS [Count] FROM StudentsExams
				WHERE (StudentId = @studentId) AND (Grade BETWEEN @grade AND @grade + 0.5))
	SET @name = (SELECT FirstName FROM Students WHERE Id = @studentId)

	RETURN CONCAT('You have to update ', @count, ' grades for the student ', @name)
END

---------------------------------------------------------------------------------
12. Exclude From School
---------------------------------------------------------------------------------

CREATE PROC usp_ExcludeFromSchool(@StudentId INT)
AS
BEGIN
	IF(@studentId NOT IN (SELECT Id FROM Students))
		BEGIN
			RAISERROR('This school has no student with the provided id!', 16, 1)
			RETURN
		END

	DELETE FROM StudentsTeachers
	WHERE StudentId = @StudentId

	DELETE FROM StudentsSubjects
	WHERE StudentId = @StudentId

	DELETE FROM StudentsExams
	WHERE StudentId = @StudentId

	DELETE FROM Students
	WHERE Id = @StudentId
END


