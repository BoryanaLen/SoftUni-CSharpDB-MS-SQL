---------------------------------------------------------------------------------
Section 1. DDL (30 pts)
---------------------------------------------------------------------------------

CREATE TABLE Students(
Id INT PRIMARY KEY IDENTITY,
FirstName NVARCHAR(30) NOT NULL,
MiddleName NVARCHAR(25),
LastName NVARCHAR(30) NOT NULL,
Age INT CHECK (Age BETWEEN 5 AND 100),
[Address] NVARCHAR(50),
Phone NCHAR(10)
)

CREATE TABLE Subjects(
Id INT PRIMARY KEY IDENTITY,
[Name] NVARCHAR(20) NOT NULL,
Lessons INT CHECK(Lessons > 0) NOT NULL
)

CREATE TABLE StudentsSubjects(
Id INT PRIMARY KEY IDENTITY,
StudentId INT FOREIGN KEY REFERENCES Students(Id) NOT NULL,
SubjectId INT FOREIGN KEY REFERENCES Subjects(Id) NOT NULL,
Grade DECIMAL (18, 2) CHECK (Grade BETWEEN 2 AND 6) NOT NULL 
)

CREATE TABLE Exams(
Id INT PRIMARY KEY IDENTITY,
[Date] DATETIME,
SubjectId INT FOREIGN KEY REFERENCES Subjects(Id) NOT NULL 
)

CREATE TABLE StudentsExams(
StudentId INT FOREIGN KEY REFERENCES Students(Id) NOT NULL,
ExamId INT FOREIGN KEY REFERENCES Exams(Id) NOT NULL,
Grade DECIMAL(18, 2) CHECK(Grade BETWEEN 2 AND 6) NOT NULL
PRIMARY KEY(StudentId, ExamId)
)

CREATE TABLE Teachers(
Id INT PRIMARY KEY IDENTITY,
FirstName NVARCHAR(20) NOT NULL,
LastName NVARCHAR(20) NOT NULL,
[Address] NVARCHAR(20) NOT NULL,
Phone NCHAR(10),
SubjectId INT FOREIGN KEY REFERENCES Subjects(Id) NOT NULL 
)

CREATE TABLE StudentsTeachers(
StudentId INT FOREIGN KEY REFERENCES Students(Id) NOT NULL,
TeacherId INT FOREIGN KEY REFERENCES Teachers(Id) NOT NULL
PRIMARY KEY(StudentId, TeacherId)
)

---------------------------------------------------------------------------------
02. Insert
---------------------------------------------------------------------------------

INSERT INTO Teachers (FirstName, LastName, Address, Phone, SubjectId)
VALUES('Ruthanne', 'Bamb', '84948 Mesta Junction', '3105500146', 6),
('Gerrard', 'Lowin', '370 Talisman Plaza', '3324874824', 2),
('Merrile',	'Lambdin', '81 Dahle Plaza', '4373065154', 5),
('Bert', 'Ivie', '2 Gateway Circle', '4409584510', 4)

INSERT INTO Subjects
VALUES ('Geometry',	12),
('Health',	10),
('Drama', 7),
('Sports', 9)

---------------------------------------------------------------------------------
03. Update
---------------------------------------------------------------------------------

UPDATE StudentsSubjects
SET Grade = 6.00
WHERE SubjectId IN(1, 2) AND Grade >= 5.50

---------------------------------------------------------------------------------
04. Delete
---------------------------------------------------------------------------------

DELETE FROM StudentsTeachers
WHERE TeacherId IN (SELECT Id FROM Teachers
			WHERE Phone LIKE '%72%')

DELETE FROM Teachers
WHERE Phone LIKE '%72%'

---------------------------------------------------------------------------------
05. Teen Students
---------------------------------------------------------------------------------

SELECT FirstName, LastName, Age FROM Students
WHERE Age >= 12
ORDER BY FirstName, LastName

---------------------------------------------------------------------------------
06. Cool Addresses
---------------------------------------------------------------------------------

SELECT FirstName + ' ' + ISNULL(MiddleName, '') + ' ' + LastName AS [Full Name],
Address
FROM Students
WHERE Address LIKE '%road%'
ORDER BY FirstName, LastName, Address

---------------------------------------------------------------------------------
07. 42 Phones
---------------------------------------------------------------------------------

SELECT FirstName,
Address,
Phone 
FROM Students
WHERE MiddleName IS NOT NULL AND Phone LIKE '42%'
ORDER BY FirstName

---------------------------------------------------------------------------------
08. Students Teachers
---------------------------------------------------------------------------------

SELECT s.FirstName,
s.LastName,
t.TeachersCount
FROM Students s
LEFT JOIN (SELECT StudentId,
		COUNT(TeacherId) AS TeachersCount
		FROM StudentsTeachers
		GROUP BY StudentId) AS t ON t.StudentId = s.Id
ORDER BY LastName

---------------------------------------------------------------------------------
09. Subjects with Students
---------------------------------------------------------------------------------

SELECT t.FirstName + ' ' + t.LastName AS FullName,
CONCAT(s.Name, '-', s.Lessons) AS Subjects,
c.Students
FROM Teachers t
JOIN Subjects AS s ON s.Id = t.SubjectId
JOIN (SELECT TeacherId,
		COUNT(StudentId) AS Students
		FROM StudentsTeachers
		GROUP BY TeacherId) AS c ON c.TeacherId = t.Id
ORDER BY Students DESC, FullName, Subjects

---------------------------------------------------------------------------------
10. Students to Go
---------------------------------------------------------------------------------

SELECT CONCAT(s.FirstName, ' ', s.LastName) AS [Full Name]
FROM Students s
LEFT JOIN (SELECT StudentId,
			COUNT(ExamId) AS CountExams
			FROM StudentsExams
			GROUP BY StudentId) AS c ON c.StudentId = s.Id
WHERE CountExams IS NULL
ORDER BY [Full Name]

---------------------------------------------------------------------------------
11. Busiest Teachers
---------------------------------------------------------------------------------
SELECT TOP 10 
t.FirstName,
t.LastName,
c.StudentsCount
FROM (SELECT TeacherId,
		COUNT(StudentId) AS StudentsCount
		FROM StudentsTeachers
		GROUP BY TeacherId) c
LEFT JOIN Teachers AS t ON t.Id = c.TeacherId
ORDER BY StudentsCount DESC, FirstName, LastName

---------------------------------------------------------------------------------
12. Top Students
---------------------------------------------------------------------------------

SELECT TOP 10
s.FirstName,
s.LastName,
g.Grade
FROM (SELECT StudentId,
		FORMAT(AVG(Grade), 'N2') AS Grade
		FROM StudentsExams
		GROUP BY StudentId) g
LEFT JOIN Students AS s ON s.Id = g.StudentId
ORDER BY Grade DESC, FirstName, LastName

---------------------------------------------------------------------------------
13. Second Highest Grade
---------------------------------------------------------------------------------

SELECT 
s.FirstName,
s.LastName,
g.Grade
FROM (SELECT StudentId,
		SubjectId,
		Grade,
		ROW_NUMBER() OVER(PARTITION BY StudentId ORDER BY Grade DESC) AS RowNumber
		FROM StudentsSubjects) g
LEFT JOIN Students AS s ON s.Id = g.StudentId
WHERE g.RowNumber = 2
ORDER BY FirstName, LastName

---------------------------------------------------------------------------------
14. Not So In The Studying
---------------------------------------------------------------------------------

SELECT FirstName + ' ' + ISNULL(MiddleName + ' ', '') + LastName AS [Full Name]
FROM Students s
LEFT JOIN (SELECT StudentId,
			COUNT(SubjectId) AS CountSubjects
			FROM StudentsSubjects
			GROUP BY StudentId
			) AS c on c.StudentId = s.Id
WHERE CountSubjects IS NULL
ORDER BY [Full Name]

---------------------------------------------------------------------------------
15. Top Student per Teacher 
---------------------------------------------------------------------------------

SELECT 
tt.[Teacher Full Name],
tt.[Subject Name],
tt.[Student Full Name],
tt.Grade
FROM (SELECT t.[Teacher Full Name],
t.[Subject Name],
t.[Student Full Name],
FORMAT(t.avgGrade, 'N2') AS Grade,
 ROW_NUMBER() OVER (PARTITION BY t.[Teacher Full Name] ORDER BY t.avgGrade DESC) AS RowNumber
FROM (SELECT t.FirstName + ' ' + t.LastName AS [Teacher Full Name],
		s.Name AS [Subject Name],
		st.FirstName + ' ' + st.LastName AS [Student Full Name],
		AVG(ss.Grade) AS avgGrade
		FROM Teachers t
		JOIN StudentsTeachers AS stt ON stt.TeacherId = t.Id
		JOIN Students AS st ON st.Id = stt.StudentId
		JOIN StudentsSubjects AS ss ON ss.StudentId = stt.StudentId
		JOIN Subjects AS s ON s.Id = ss.SubjectId AND s.Id = t.SubjectId
		GROUP BY t.FirstName, t.LastName, st.FirstName, st.LastName, s.Name) t
        ) tt
WHERE tt.RowNumber = 1
ORDER BY tt.[Subject Name], tt.[Teacher Full Name], tt.Grade DESC

---------------------------------------------------------------------------------
16. Average Grade per Subject
---------------------------------------------------------------------------------

SELECT S.Name,
a.AverageGrade
FROM Subjects s
JOIN (SELECT SubjectId,
		AVG(Grade) AS AverageGrade
		FROM StudentsSubjects
		GROUP BY SubjectId) AS a ON a.SubjectId = s.Id
ORDER BY SubjectId

---------------------------------------------------------------------------------
17. Exams Information
---------------------------------------------------------------------------------

SELECT 
t.Quarter,
t.SubjectName,
COUNT(t.Grade) AS StudentsCount
FROM ( SELECT 
		CASE
			WHEN Date IS NULL THEN  'TBA'
			WHEN MONTH(Date) <= 3 THEN  'Q1'
			WHEN MONTH(Date) BETWEEN 4 AND 6 THEN  'Q2'
			WHEN MONTH(Date) BETWEEN 7 AND 9 THEN  'Q3'
			ELSE 'Q4'
		END AS [Quarter],
		s.Name AS SubjectName,
		s.Id AS SubjectId,
		se.Grade
		FROM Exams e
		JOIN Subjects AS s ON s.Id = e.SubjectId
		JOIN StudentsExams AS se ON se.ExamId = e.Id
		WHERE se.Grade >= 4) t
GROUP BY t.Quarter, t.SubjectName
ORDER BY t.Quarter

---------------------------------------------------------------------------------
18. Exam Grades
---------------------------------------------------------------------------------

CREATE FUNCTION udf_ExamGradesToUpdate(@studentId INT, @grade DECIMAL(18, 2))
RETURNS VARCHAR(150)
BEGIN
	IF(@studentId NOT IN (SELECT Id FROM Students))
	BEGIN
	RETURN 'The student with provided id does not exist in the school!'
	END
	ELSE IF(@grade > 6)
	BEGIN
	RETURN 'Grade cannot be above 6.00!'
	END
DECLARE @studentsCount INT
DECLARE @studentName VARCHAR(20)
SET @studentsCount = (SELECT COUNT(Grade) FROM StudentsExams
		WHERE StudentId = @studentId AND Grade BETWEEN @grade AND @grade + 0.5)
SET @studentName = (SELECT FirstName FROM Students
					WHERE Id = @studentId)
RETURN CONCAT('You have to update ', @studentsCount, ' grades for the student ', @studentName)
END

---------------------------------------------------------------------------------
19. Exclude From School
---------------------------------------------------------------------------------

CREATE PROC usp_ExcludeFromSchool(@StudentId INT)
AS
BEGIN
	IF(@studentId NOT IN (SELECT Id FROM Students))
	BEGIN
	RAISERROR ('This school has no student with the provided id!', 16, 1)
	RETURN
	END

	    DELETE FROM StudentsExams
		WHERE StudentId = @StudentId

		DELETE FROM StudentsSubjects
		WHERE StudentId = @StudentId

		DELETE FROM StudentsTeachers
		WHERE StudentId = @StudentId

		DELETE FROM Students
		WHERE Id = @StudentId
END

---------------------------------------------------------------------------------
20. Deleted Students
---------------------------------------------------------------------------------

CREATE TRIGGER tr_DeletedStudents
ON Students
AFTER DELETE
AS
BEGIN
	INSERT INTO ExcludedStudents
	SELECT deleted.Id, deleted.FirstName + ' ' + deleted.LastName FROM deleted
END