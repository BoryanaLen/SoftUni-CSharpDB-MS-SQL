---------------------------------------------------------------------------------
Section 1. DDL (30 pts)
---------------------------------------------------------------------------------

CREATE TABLE Planes(
Id INT PRIMARY KEY IDENTITY,
[Name] VARCHAR(30) NOT NULL,
Seats INT NOT NULL,
[Range] INT NOT NULL
)

CREATE TABLE Flights(
Id INT PRIMARY KEY IDENTITY,
DepartureTime DATETIME,
ArrivalTime DATETIME,
Origin VARCHAR(50) NOT NULL,
Destination VARCHAR(50) NOT NULL,
PlaneId INT FOREIGN KEY REFERENCES Planes(Id) NOT NULL
)

CREATE TABLE Passengers(
Id INT PRIMARY KEY IDENTITY,
FirstName VARCHAR(30) NOT NULL,
LastName VARCHAR(30) NOT NULL,
Age INT NOT NULL,
[Address] VARCHAR(30) NOT NULL,
PassportId CHAR(11) NOT NULL
)

CREATE TABLE LuggageTypes(
Id INT PRIMARY KEY IDENTITY,
[Type] VARCHAR(30) NOT NULL
)

CREATE TABLE Luggages(
Id INT PRIMARY KEY IDENTITY,
LuggageTypeId INT FOREIGN KEY REFERENCES LuggageTypes(Id) NOT NULL,
PassengerId INT FOREIGN KEY REFERENCES Passengers(Id) NOT NULL
)

CREATE TABLE Tickets(
Id INT PRIMARY KEY IDENTITY,
PassengerId INT FOREIGN KEY REFERENCES Passengers(Id) NOT NULL,
FlightId INT FOREIGN KEY REFERENCES Flights(Id) NOT NULL,
LuggageId INT FOREIGN KEY REFERENCES Luggages(Id) NOT NULL,
Price DECIMAL(18, 2) NOT NULL
)

---------------------------------------------------------------------------------
02. Insert
---------------------------------------------------------------------------------

INSERT INTO Planes
VALUES('Airbus 336', 112, 5132),
('Airbus 330', 432, 5325),
('Boeing 369', 231,	2355),
('Stelt 297', 254, 2143),
('Boeing 338', 165, 5111),
('Airbus 558', 387, 1342),
('Boeing 128', 345,	5541)


INSERT INTO LuggageTypes
VALUES('Crossbody Bag'),
('School Backpack'),
('Shoulder Bag')

---------------------------------------------------------------------------------
03. Update
---------------------------------------------------------------------------------

UPDATE Tickets
SET Price = Price* 1.13
WHERE FlightId = (SELECT Id FROM Flights
                  WHERE Destination = 'Carlsbad')

---------------------------------------------------------------------------------
04. Delete
---------------------------------------------------------------------------------

DELETE FROM Tickets
WHERE FlightId = (SELECT Id FROM Flights
                  WHERE Destination = 'Ayn Halagim')

DELETE FROM Flights
WHERE Destination = 'Ayn Halagim'

---------------------------------------------------------------------------------
05. The "Tr" Planes
---------------------------------------------------------------------------------

SELECT * FROM Planes
WHERE Name LIKE '%tr%'
ORDER BY Id, Name, Seats, Range

---------------------------------------------------------------------------------
06. Flight Profits
---------------------------------------------------------------------------------
SELECT FlightId,
SUM(Price) AS Price
FROM Tickets
GROUP BY FlightId
ORDER BY Price DESC, FlightId

---------------------------------------------------------------------------------
07. Passenger Trips
---------------------------------------------------------------------------------

SELECT p.FirstName + ' ' + p.LastName AS [Full Name ],
f.Origin,
f.Destination
FROM Passengers p
JOIN Tickets AS t ON t.PassengerId = p.Id
JOIN Flights as f ON f.Id = t.FlightId
ORDER BY [Full Name ], Origin, Destination

---------------------------------------------------------------------------------
08. Non Adventures People
---------------------------------------------------------------------------------

SELECT p.FirstName,
p.LastName,
p.Age 
FROM Passengers p
LEFT JOIN (SELECT PassengerId,
		COUNT(FlightId) AS FlightsCount
		FROM Flights f
		JOIN Tickets AS t ON t.FlightId = f.Id
		GROUP BY PassengerId) AS t ON t.PassengerId = p.Id
WHERE FlightsCount IS NULL
ORDER BY Age DESC, FirstName, LastName

---------------------------------------------------------------------------------
09. Full Info
---------------------------------------------------------------------------------

SELECT  
p.FirstName + ' ' + p.LastName AS [Full Name ],
pl.Name AS [Plane Name],
fl.Origin + ' - ' + fl.Destination AS [Trip],
lt.Type AS [Luggage Type]
FROM Flights fl
JOIN Planes AS pl ON pl.Id = fl.PlaneId
JOIN Tickets AS t ON t.FlightId = fl.Id
JOIN Luggages AS l ON l.Id = t.LuggageId
JOIN LuggageTypes AS lt ON lt.Id = l.LuggageTypeId
JOIN Passengers AS p ON p.Id = t.PassengerId
ORDER BY [Full Name ], [Plane Name], Origin, Destination, [Luggage Type]

---------------------------------------------------------------------------------
10. PSP
---------------------------------------------------------------------------------

SELECT 
p.Name AS [Name],
p.Seats,
ISNULL(t.CountTickets, 0) AS [Passengers Count]
FROM Planes p
LEFT JOIN (SELECT pl.Id AS PlaneId,
		COUNT(t.Id) AS CountTickets
		FROM Planes pl
		JOIN Flights AS fl ON fl.PlaneId = pl.Id
		JOIN Tickets AS t ON t.FlightId = fl.Id
		GROUP BY pl.Id) AS t ON t.PlaneId = p.Id
ORDER BY [Passengers Count] DESC, Name, Seats

---------------------------------------------------------------------------------
11. Vacation
---------------------------------------------------------------------------------

CREATE FUNCTION udf_CalculateTickets(@origin VARCHAR(50), @destination VARCHAR(50), @peopleCount INT)
RETURNS VARCHAR(30)
AS
BEGIN
IF(@peopleCount <= 0)
BEGIN
RETURN 'Invalid people count!'
END
DECLARE @flightId INT
SET @flightId = (SELECT t.FlightId FROM Tickets t
				LEFT JOIN Flights AS fl ON fl.Id = t.FlightId
				WHERE Origin = @origin AND Destination = @destination)

IF(@flightId IS NULL)
BEGIN
RETURN 'Invalid flight!'
END
DECLARE @totalPrice DECIMAL(18, 2)
DECLARE @price DECIMAL (18, 2)
SET @price = CAST((SELECT t.Price FROM Tickets t
				LEFT JOIN Flights AS fl ON fl.Id = t.FlightId
				WHERE Origin = @origin AND Destination = @destination) AS DECIMAL(18, 2))
SET @totalPrice = @price * @peopleCount
DECLARE @result VARCHAR(30)
SET @result = CONCAT('Total price ',  @totalPrice)
RETURN @result
END

---------------------------------------------------------------------------------
12. Wrong Data
---------------------------------------------------------------------------------

CREATE PROC usp_CancelFlights
AS
BEGIN
	UPDATE Flights
	SET ArrivalTime = NULL, DepartureTime = NULL
	WHERE ArrivalTime > DepartureTime
END



