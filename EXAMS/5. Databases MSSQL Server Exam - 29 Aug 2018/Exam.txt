---------------------------------------------------------------------------------
Section 1. DDL (30 pts)
---------------------------------------------------------------------------------

CREATE TABLE Categories(
Id INT PRIMARY KEY IDENTITY,
[Name] NVARCHAR(30) NOT NULL
)

CREATE TABLE Items(
Id INT PRIMARY KEY IDENTITY,
[Name] NVARCHAR(30) NOT NULL,
Price DECIMAL(18, 2) NOT NULL,
CategoryId INT FOREIGN KEY REFERENCES Categories(Id) NOT NULL
)

CREATE TABLE Employees(
Id INT PRIMARY KEY IDENTITY,
FirstName NVARCHAR(50) NOT NULL,
LastName NVARCHAR(50) NOT NULL,
Phone CHAR(12) NOT NULL,
Salary DECIMAL(18, 2) NOT NULL
)

CREATE TABLE Orders(
Id INT PRIMARY KEY IDENTITY,
[DateTime] DATETIME NOT NULL,
EmployeeId INT FOREIGN KEY REFERENCES Employees(Id) NOT NULL
)

CREATE TABLE OrderItems(
OrderId INT FOREIGN KEY REFERENCES Orders(Id) NOT NULL,
ItemId INT FOREIGN KEY REFERENCES Items(Id) NOT NULL,
Quantity INT CHECK(Quantity >= 1) NOT NULL
PRIMARY KEY (OrderId, ItemId)
)


CREATE TABLE Shifts(
Id INT UNIQUE IDENTITY,
EmployeeId INT FOREIGN KEY REFERENCES Employees(Id),
CheckIn DATETIME NOT NULL,
CheckOut DATETIME  NOT NULL
PRIMARY KEY (Id, EmployeeId)
)

ALTER TABLE Shifts
ADD  CONSTRAINT chk_date 
CHECK( CheckIn < CheckOut)

---------------------------------------------------------------------------------
02. Insert
---------------------------------------------------------------------------------

INSERT INTO Employees
VALUES('Stoyan', 'Petrov', '888-785-8573', 500.25),
('Stamat', 'Nikolov', '789-613-1122', 999995.25),
('Evgeni', 'Petkov', '645-369-9517', 1234.51),
('Krasimir', 'Vidolov',	'321-471-9982',	50.25)

INSERT INTO Items
VALUES('Tesla battery',	154.25,	8),
('Chess', 30.25, 8),
('Juice', 5.32,	1),
('Glasses', 10,	8),
('Bottle of water', 1, 1)

---------------------------------------------------------------------------------
03. Update
---------------------------------------------------------------------------------

UPDATE Items
SET Price = Price * 1.27
WHERE CategoryId BETWEEN 1 AND 3

---------------------------------------------------------------------------------
04. Delete
---------------------------------------------------------------------------------

DELETE FROM OrderItems
WHERE OrderId = 48

DELETE FROM Orders
WHERE Id = 48

---------------------------------------------------------------------------------
05. Richest People
---------------------------------------------------------------------------------

SELECT Id, FirstName 
FROM Employees
WHERE Salary > 6500
ORDER BY FirstName, Id

---------------------------------------------------------------------------------
06. Cool Phone Numbers
---------------------------------------------------------------------------------

SELECT 
FirstName + ' ' + LastName AS [Full Name],
Phone AS [Phone Number]
FROM Employees
WHERE Phone LIKE '3%'
ORDER BY FirstName, Phone

---------------------------------------------------------------------------------
07. Employee Statistics
---------------------------------------------------------------------------------

SELECT 
FirstName,
LastName,
T.Count
FROM Employees e
JOIN (SELECT EmployeeId,
		COUNT(*) AS [Count]
		FROM Orders o
		GROUP BY EmployeeId) AS t ON t.EmployeeId = e.Id
ORDER BY Count DESC, FirstName

---------------------------------------------------------------------------------
08. Hard Workers Club
---------------------------------------------------------------------------------

SELECT 
FirstName,
LastName,
t.WorkingHours AS [Work hours]
FROM Employees e
JOIN (SELECT EmployeeId,
		AVG(DATEDIFF(HOUR, CheckIn, CheckOut)) AS WorkingHours
		FROM Shifts
		GROUP BY EmployeeId
		HAVING AVG(DATEDIFF(HOUR, CheckIn, CheckOut)) > 7) AS t ON t.EmployeeId = e.Id
ORDER BY [Work hours] DESC, Id

---------------------------------------------------------------------------------
09. The Most Expensive Order
---------------------------------------------------------------------------------

SELECT TOP 1
T.Id,
SUM(T.Total) AS TotalPrice
FROM (SELECT 
		o.Id,
		i.Price * Quantity AS Total
		FROM Orders o
		JOIN OrderItems AS oi ON oi.OrderId = o.Id
		JOIN Items AS i ON i.Id = oi.ItemId) t
GROUP BY t.Id
ORDER BY TotalPrice DESC

---------------------------------------------------------------------------------
10. Rich Item, Poor Item
---------------------------------------------------------------------------------

SELECT TOP 10
o.Id,
MAX(Price) AS ExpensivePrice,
MIN(Price) AS CheapPrice
FROM Orders o
JOIN OrderItems AS oi ON oi.OrderId = o.Id
JOIN Items AS i ON i.Id = oi.ItemId
GROUP BY o.Id
ORDER BY ExpensivePrice DESC, o.Id


---------------------------------------------------------------------------------
11. Cashiers
---------------------------------------------------------------------------------

SELECT 
e.Id,
e.FirstName,
e.LastName
FROM Employees e
JOIN (SELECT EmployeeId,
		COUNT(*) AS Orders
		FROM Orders
		GROUP BY EmployeeId) AS t ON t.EmployeeId = e.Id
ORDER BY e.Id


---------------------------------------------------------------------------------
12. Lazy Employees 
---------------------------------------------------------------------------------

SELECT 
e.Id,
FirstName + ' ' + LastName AS [Full Name]
FROM Employees e
JOIN (SELECT DISTINCT EmployeeId,
		DATEDIFF(HOUR, CheckIn, CheckOut) AS WorkingHours
		FROM Shifts
		WHERE (DATEDIFF(HOUR, CheckIn, CheckOut)) < 4) AS t ON t.EmployeeId = e.Id

ORDER BY e.Id

---------------------------------------------------------------------------------
13. Sellers
---------------------------------------------------------------------------------

SELECT TOP 10
e.FirstName + ' ' + e.LastName AS [Full Name],
tt.[Total Price],
tt.Items
FROM Employees e
JOIN (SELECT 
		EmployeeId,
		SUM(T.[Total Price]) AS [Total Price],
		SUM(T.Quantity) AS Items
		FROM (SELECT 
				Quantity * Price AS [Total Price],
				EmployeeId,
				Quantity
				FROM Orders o
				JOIN OrderItems AS oi ON oi.OrderId = o.Id
				JOIN Items AS i ON i.Id = oi.ItemId
				WHERE o.DateTime < '2018-06-15') t
		GROUP BY t.EmployeeId) AS tt ON tt.EmployeeId = e.Id
ORDER BY [Total Price] DESC, Items DESC

---------------------------------------------------------------------------------
14. Tough Days
---------------------------------------------------------------------------------

SELECT 
e.FirstName + ' ' + e.LastName AS [Full Name],
tt.[Day of week]
FROM Employees e
JOIN (SELECT e.Id FROM Employees e
		LEFT JOIN Orders AS o ON o.EmployeeId = e.Id
		WHERE o.Id IS NULL) AS t ON t.Id = e.Id
JOIN (SELECT EmployeeId, DATENAME(DW, CheckIn) AS [Day of week],
			DATEDIFF(HOUR, CheckIn, CheckOut) AS WorkingHours
		FROM Shifts
		WHERE DATEDIFF(HOUR, CheckIn, CheckOut) > 12) AS tt ON tt.EmployeeId = e.Id
ORDER BY e.Id

---------------------------------------------------------------------------------
15. Top Order per Employee
---------------------------------------------------------------------------------

SELECT 
(e.FirstName + ' ' + e.LastName) AS [Full Name],
DATEDIFF(HOUR, sh.CheckIn, sh.CheckOut) AS [WorkHours],
ttt.TotalPrice
FROM (SELECT 
		tt.EmployeeId,
		tt.OrderId,
		tt.TotalPrice,
		tt.DateTime,
		DENSE_RANK() OVER (PARTITION BY tt.EmployeeId ORDER BY tt.TotalPrice DESC) AS Rank
		FROM (SELECT t.EmployeeId,
				t.OrderId,
				t.DateTime,
				SUM(t.TotalPrice) AS TotalPrice
				FROM (SELECT 
						o.EmployeeId,
						o.Id AS OrderId,
						o.DateTime,
						(Quantity * Price) AS TotalPrice 
						FROM Orders o
						JOIN OrderItems AS oi ON oi.OrderId = o.Id
						JOIN Items AS i ON i.Id = oi.ItemId) t
				GROUP BY t.EmployeeId, t.OrderId, t.DateTime) tt) ttt
JOIN Employees AS e ON e.Id = ttt.EmployeeId
JOIN Shifts AS sh ON sh.EmployeeId = ttt.EmployeeId
WHERE ttt.Rank = 1 AND ttt.DateTime BETWEEN sh.CheckIn AND sh.CheckOut
ORDER BY [Full Name]

---------------------------------------------------------------------------------
16. Average Profit per Day
---------------------------------------------------------------------------------

SELECT
t.Day,
FORMAT(AVG(t.Profit), 'N2') AS [Total profit]
FROM (SELECT 
	DATEPART(DAY, o.DateTime) AS [Day],
	oi.Quantity * i.Price AS Profit
	FROM Orders o
	JOIN OrderItems AS oi ON oi.OrderId = o.Id
	JOIN Items AS i ON i.Id = oi.ItemId) t
GROUP BY t.Day
ORDER BY t.Day

---------------------------------------------------------------------------------
17. Top Products
---------------------------------------------------------------------------------

SELECT 
i.Name AS Item,
c.Name AS Category,
t.Sold AS Count,
i.Price * t.Sold AS TotalPrice
FROM Items i
LEFT JOIN Categories AS c ON c.Id = i.CategoryId
LEFT JOIN (SELECT ItemId,
		SUM(Quantity) AS Sold
		FROM OrderItems
		GROUP BY ItemId) AS t ON t.ItemId = i.Id
ORDER BY TotalPrice DESC, Count DESC


---------------------------------------------------------------------------------
18. Promotion Days
---------------------------------------------------------------------------------

CREATE FUNCTION udf_GetPromotedProducts(@CurrentDate DATE, @StartDate DATE, @EndDate DATE, @Discount INT, 
		@FirstItemId INT, @SecondItemId INT , @ThirdItemId INT)
RETURNS VARCHAR(100)
BEGIN
	IF(@FirstItemId NOT IN (SELECT Id FROM Items) OR @SecondItemId NOT IN (SELECT Id FROM Items) 
			OR @ThirdItemId NOT IN (SELECT Id FROM Items))
	BEGIN
		RETURN 'One of the items does not exists!'
	END

	IF(@CurrentDate NOT BETWEEN @StartDate AND @EndDate)
	BEGIN
		RETURN 'The current date is not within the promotion dates!'
	END

	DECLARE @FirstItemName VARCHAR(20)  = (SELECT Name FROM Items WHERE Id = @FirstItemId)
	DECLARE @SecondItemName VARCHAR(20)  = (SELECT Name FROM Items WHERE Id = @SecondItemId)
	DECLARE @ThirdItemName VARCHAR(20)  = (SELECT Name FROM Items WHERE Id = @ThirdItemId)
	DECLARE @FirstItemPrice DECIMAL(18, 2)  = (SELECT Price FROM Items WHERE Id = @FirstItemId) * (100 - @Discount) / 100
	DECLARE @SecondItemPrice DECIMAL(18, 2)  = (SELECT Price FROM Items WHERE Id = @SecondItemId) * (100 - @Discount) / 100
	DECLARE @ThirdItemPrice DECIMAL(18, 2)  = (SELECT Price FROM Items WHERE Id = @ThirdItemId) * (100 - @Discount) / 100

	RETURN CONCAT(@FirstItemName,' price: ', @FirstItemPrice, ' <-> ', @SecondItemName, ' price: ', @SecondItemPrice, ' <-> ',
	@ThirdItemName, ' price: ', @ThirdItemPrice)
END


---------------------------------------------------------------------------------
19. Cancel Order
---------------------------------------------------------------------------------

CREATE PROC usp_CancelOrder(@OrderId INT, @CancelDate DATE)
AS
BEGIN
	IF(@OrderId NOT IN (SELECT Id FROM Orders))
	BEGIN
		RAISERROR('The order does not exist!', 16, 1)
		RETURN
	END

	IF((DATEDIFF(Day, CAST((SELECT DateTime FROM Orders WHERE Id = @OrderId) AS DATE), @CancelDate) >= 3))
	BEGIN
		RAISERROR('You cannot cancel the order!', 16, 1)
		RETURN
	END

	DELETE FROM OrderItems
	WHERE OrderId = @OrderId

	DELETE FROM Orders
	WHERE Id = @OrderId
END

---------------------------------------------------------------------------------
20. Deleted Orders
---------------------------------------------------------------------------------

CREATE TRIGGER tr_DeletedOrders
ON OrderItems AFTER DELETE
AS
BEGIN
INSERT INTO DeletedOrders
SELECT OrderId, ItemId, Quantity FROM deleted
END






