-------------------------------------------------------------------------------------------------------------------------
Problem 01. One-To-One Relationship 
-------------------------------------------------------------------------------------------------------------------------
CREATE TABLE Passports(
PassportID INT PRIMARY KEY IDENTITY(101, 1),
PassportNumber VARCHAR(20) NOT NULL
)

INSERT INTO Passports
VALUES('N34FG21B'),
('K65LO4R7'),
('ZE657QP2')

CREATE TABLE Persons(
PersonID INT IDENTITY NOT NULL,
FirstName VARCHAR(20) NOT NULL,
Salary DECIMAL(18, 2) NOT NULL,
PassportID INT FOREIGN KEY REFERENCES Passports(PassportID)
)

INSERT INTO Persons
VALUES('Roberto', 43300.00, 102),
('Tom',	56100.00, 103),
('Yana', 60200.00, 101)


ALTER TABLE Persons
ADD CONSTRAINT PK_PersonID
PRIMARY KEY (PersonID)

-------------------------------------------------------------------------------------------------------------------------
Problem 02. One-To-Many Relationship 
-------------------------------------------------------------------------------------------------------------------------

CREATE TABLE Manufacturers(
ManufacturerID INT PRIMARY KEY IDENTITY,
[Name] VARCHAR(20) NOT NULL,
EstablishedOn DATE NOT NULL
)

INSERT INTO Manufacturers
VALUES('BMW', '07/03/1916'),
('Tesla', '01/01/2003'),
('Lada', '01/05/1966')

CREATE TABLE Models(
ModelID INT PRIMARY KEY IDENTITY(101, 1),
[Name] VARCHAR(20) NOT NULL,
ManufacturerID INT FOREIGN KEY REFERENCES Manufacturers(ManufacturerID)
)

INSERT INTO Models
VALUES ('X1', 1),
('i6', 1),
('Model S', 2),
('Model X', 2),
('Model 3', 2),
('Nova', 3)

-------------------------------------------------------------------------------------------------------------------------
Problem 03. Many-To-Many Relationship 
-------------------------------------------------------------------------------------------------------------------------

CREATE TABLE Students(
StudentID INT PRIMARY KEY IDENTITY,
[Name] VARCHAR(20) NOT NULL
)

INSERT INTO Students
VALUES('Mila'),
('Toni'),
('Ron')


CREATE TABLE Exams(
ExamID INT PRIMARY KEY IDENTITY(101, 1),
[Name] VARCHAR(20) NOT NULL
)

INSERT INTO Exams
VALUES('SpringMVC'),
('Neo4j'),
('Oracle 11g')

CREATE TABLE StudentsExams(
StudentID INT FOREIGN KEY REFERENCES Students(StudentID),
ExamID INT FOREIGN KEY REFERENCES Exams(ExamID),
PRIMARY KEY (StudentID, ExamID)
)

INSERT INTO StudentsExams
VALUES (1, 101),
(1,	102),
(2,	101),
(3,	103),
(2,	102),
(2,	103)

-------------------------------------------------------------------------------------------------------------------------
Problem 04. Self-Referencing  
-------------------------------------------------------------------------------------------------------------------------

CREATE TABLE Teachers(
TeacherID INT PRIMARY KEY IDENTITY(101, 1),
[Name] VARCHAR(20) NOT NULL,
ManagerID INT FOREIGN KEY REFERENCES Teachers(TeacherID)
)

INSERT INTO Teachers
VALUES ('John',	NULL),
('Maya', 106),
('Silvia', 106),
('Ted', 105),
('Mark', 101),
('Greta', 101)

-------------------------------------------------------------------------------------------------------------------------
Problem 05. Online Store Database 
-------------------------------------------------------------------------------------------------------------------------

CREATE TABLE ItemTypes(
ItemTypeID INT PRIMARY KEY IDENTITY,
[Name] VARCHAR(50) NOT NULL
)

CREATE TABLE Items(
ItemID INT PRIMARY KEY IDENTITY,
[Name] VARCHAR(50) NOT NULL,
ItemTypeID INT FOREIGN KEY REFERENCES ItemTypes(ItemTypeID)
)

CREATE TABLE Cities(
CityID INT PRIMARY KEY IDENTITY,
[Name] VARCHAR(50) NOT NULL
)

CREATE TABLE Customers(
CustomerID INT PRIMARY KEY IDENTITY,
[Name] VARCHAR(50) NOT NULL,
Birthday DATE NOT NULL,
CityID INT FOREIGN KEY REFERENCES Cities(CityID)
)

CREATE TABLE Orders(
OrderID INT PRIMARY KEY IDENTITY,
CustomerID INT FOREIGN KEY REFERENCES Customers(CustomerID)
)

CREATE TABLE OrderItems(
OrderID INT FOREIGN KEY REFERENCES Orders(OrderID),
ItemID INT FOREIGN KEY REFERENCES Items(ItemID)
PRIMARY KEY (OrderID, ItemID)
)

-------------------------------------------------------------------------------------------------------------------------
Problem 06. University Database
-------------------------------------------------------------------------------------------------------------------------

CREATE TABLE Majors(
MajorID INT PRIMARY KEY IDENTITY,
[Name] VARCHAR(50) NOT NULL
)

CREATE TABLE Students(
StudentID INT PRIMARY KEY IDENTITY,
StudentNumber VARCHAR(20) NOT NULL,
StudentName VARCHAR(50) NOT NULL,
MajorID INT FOREIGN KEY REFERENCES Majors(MajorID)
)

CREATE TABLE Payments(
PaymentID INT PRIMARY KEY IDENTITY,
PaymentDate DATE NOT NULL,
PaymentAmount DECIMAL(18, 2) NOT NULL,
StudentID INT FOREIGN KEY REFERENCES Students(StudentID)
)

CREATE TABLE Subjects(
SubjectID INT PRIMARY KEY IDENTITY,
SubjectName VARCHAR(50) NOT NULL
)

CREATE TABLE Agenda(
StudentID INT FOREIGN KEY REFERENCES Students(StudentID),
SubjectID INT FOREIGN KEY REFERENCES Subjects(SubjectID),
PRIMARY KEY (StudentID,SubjectID)
)


-------------------------------------------------------------------------------------------------------------------------
Problem 09. Peaks in Rila
-------------------------------------------------------------------------------------------------------------------------

SELECT MountainRange, PeakName, Elevation FROM Mountains
JOIN Peaks ON Mountains.Id = Peaks.MountainId
WHERE MountainRange = 'Rila'
ORDER BY Elevation DESC


